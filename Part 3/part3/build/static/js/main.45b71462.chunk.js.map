{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteServce","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45b71462.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important';\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n      }\r\n    return request.then(response => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nconst noteServce = { getAll, create, update };\r\n\r\nexport default noteServce;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">{message}</div>\r\n    )\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    };\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Note from './components/Note';\r\nimport noteService from './services/notes';\r\nimport Notification from './components/Notification';\r\nimport Footer from './components/Footer';\r\nimport axios from 'axios';\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState('a new note...');\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState('some error happened...');\r\n\r\n  useEffect(() => {\r\n    // axios\r\n    //   .get('http://localhost:3001/api/notes')\r\n    //   .then(res => {\r\n    //     setNotes(res.data)\r\n    //   })\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes);\r\n      })\r\n  }, []);\r\n\r\n  console.log('render', notes.length, 'notes');\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\r\n\r\n  const addNote = event => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5\r\n    };\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote));\r\n        setNewNote('');\r\n      });\r\n  };\r\n\r\n  const handleNoteChange = event => {\r\n    console.log(event.target.value);\r\n    setNewNote(event.target.value);\r\n  }\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(`Note '${note.content}' was already removed from server`);\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      })\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />)}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n/*const notes = [\r\n  {\r\n    id: 1,\r\n    content: 'HTML is easy',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true\r\n  },\r\n  {\r\n    id: 2,\r\n    content: 'Browser can execute only JavaScript',\r\n    date: '2019-05-30T18:39:34.091Z',\r\n    important: false\r\n  },\r\n  {\r\n    id: 3,\r\n    content: 'GET and POST are the most important methods of HTTP protocol',\r\n    date: '2019-05-30T19:20:14.298Z',\r\n    important: true\r\n  }\r\n];*/\r\n"],"sourceRoot":""}